import cv2
import numpy as np
from collections import deque

def detect_living_nonliving_webcam():
    # Load YOLO model and configuration files
    net = cv2.dnn.readNet("yolov3.weights", "yolov3.cfg")
    with open("coco.names", "r") as f:
        classes = f.read().strip().split("\n")

    # Open the webcam
    cap = cv2.VideoCapture(0)

    # Initialize buffers for counts
    living_buffer = deque(maxlen=30)  # Adjust the buffer size as needed
    nonliving_buffer = deque(maxlen=30)
    conclusion_threshold = 0.6  # Adjust this threshold as needed

    while True:
        # Read a frame from the webcam
        ret, frame = cap.read()
        height, width, _ = frame.shape

        # Create a 4D blob from the frame
        blob = cv2.dnn.blobFromImage(frame, 0.00392, (416, 416), (0, 0, 0), True, crop=False)
        net.setInput(blob)

        # Get output layer names
        output_layer_names = net.getUnconnectedOutLayersNames()

        # Run forward pass and get predictions
        detections = net.forward(output_layer_names)

        # Process and display the detected objects
        living_count = 0
        nonliving_count = 0

        for detection in detections:
            for obj in detection:
                scores = obj[5:]
                class_id = np.argmax(scores)
                confidence = scores[class_id]

                if confidence > 0.5:
                    label = classes[class_id]

                    if label == "person":  # Living thing
                        living_count += 1
                        color = (0, 255, 0)  # Green for living things
                    elif label == "car":  # Non-living thing
                        nonliving_count += 1
                        color = (0, 0, 255)  # Red for non-living things
                    else:
                        continue

                    center_x = int(obj[0] * width)
                    center_y = int(obj[1] * height)
                    w = int(obj[2] * width)
                    h = int(obj[3] * height)

                    x = int(center_x - w / 2)
                    y = int(center_y - h / 2)

                    cv2.rectangle(frame, (x, y), (x + w, y + h), color, 2)
                    cv2.putText(frame, label, (x, y - 5), cv2.FONT_HERSHEY_SIMPLEX, 0.5, color, 2)

        # Display the result
        cv2.imshow("Object Detection", frame)

        # Update the buffers
        living_buffer.append(living_count)
        nonliving_buffer.append(nonliving_count)

        # Calculate the averages
        avg_living = sum(living_buffer) / len(living_buffer)
        avg_nonliving = sum(nonliving_buffer) / len(nonliving_buffer)

        # Print the counts and averages in the terminal
        print(f"Living things: {living_count}, Non-living things: {nonliving_count}")
        print(f"Avg Living: {avg_living}, Avg Non-living: {avg_nonliving}")

        # Make a conclusion based on the threshold
        if avg_living > conclusion_threshold:
            print("Conclusion: Living Things Detected")
        elif avg_nonliving > conclusion_threshold:
            print("Conclusion: Non-living Things Detected")
        else:
            print("Conclusion: Mixed Scene")

        # Break the loop if 'q' key is pressed
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    # Release the webcam and close the window
    cap.release()
    cv2.destroyAllWindows()

if __name__ == "__main__":
    detect_living_nonliving_webcam()
